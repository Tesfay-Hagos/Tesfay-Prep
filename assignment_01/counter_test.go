package assignment01_test
/*
import (
	"bytes"
	"fmt"
	"log"
	"os"
	"tesfayprep/assignment_01/count"
	"testing"

	"golang.org/x/net/html"
)

var raw = `<!DOCTYPE html>
<html lang="en">

<head>
   
</head>

<body>
<div>

    <div>
		<p>this is that alfa nakfow</p>
		<p>this is that this alfa nakfow</p>
		<p>this is that this alfa nakfow</p>
		<p>this is that this alfa nakfow</p>
	<section>
		<p>this is that alfa nakfow</p>
		<p>this is that this alfa nakfow</p>
		<p>this is that this alfa nakfow</p>
		<p>this is that this alfa nakfow</p>
		<img src="xxx.png" alt="first image">
		<img src="xxx.png" alt="first image">
		<p>Links:</p><ul><li><a href="foo">Foo</a><li><a href="/bar/baz">BarBaz</a></ul>
	</section>
	<section>
		<p>this is that alfa nakfow</p>
		<p>this is that this alfa nakfow</p>
		<p>this is that this alfa nakfow</p>
		<p>this is that this alfa nakfow</p>
		<img src="xxx.png" alt="first image">
		<img src="xxx.png" alt="first image">
	</section>

    </div>
    </div>

</body>

</html>`

// WARNING: DO NOT EDIT THIS FILE
type countUseCase struct {
	Name           string
	Input          *html.Node
	ExpectedResult result
}
type result struct {
	words  int
	images int
	links  int
}

func TestDocumentCounter(t *testing.T) {
	doc, err := html.Parse(bytes.NewReader([]byte(raw)))

	if err != nil {
		fmt.Fprintf(os.Stderr, "parse faild. %s\n", err)
		os.Exit(-1)
	}
	usecases := []countUseCase{
		{
			Name:           "single number",
			Input:          doc,
			ExpectedResult: result{72, 4, 2},
		},
	}

	for _, uc := range usecases {
		t.Run(uc.Name, func(t *testing.T) {
			words, images, links := count.CountWordsAndImages(doc)
			log.Println(words, images, links)
			if words != uc.ExpectedResult.words {
				t.Errorf("got: %v, want: %v", words, uc.ExpectedResult.words)
			}
			if images != uc.ExpectedResult.images {
				t.Errorf("got: %v, want: %v", images, uc.ExpectedResult.images)
			}
			if links != uc.ExpectedResult.links {
				t.Errorf("got: %v, want: %v", links, uc.ExpectedResult.links)
			}
		})
	}
}
*/